{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap d6738c0e5af25044d754","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-dynamic-name.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///./directives/formly-form.html","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_16__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ngModuleName","angular","ngModule","version","window","directive","formlyUtil","link","scope","el","attrs","ctrl","validators","$eval","formlyCustomValidation","hasValidators","hasOwnProperty","forEach","validator","name","validatorCollection","isAsync","modelValue","viewValue","formlyEval","$parsers","unshift","isValid","$modelValue","$setValidity","restrict","priority","controller","$scope","$element","$attrs","removeAttr","$set","formlyDynamicName","formlyField","$http","$q","$compile","$templateCache","formlyConfig","formlyUsability","formlyWarn","getTemplate","options","template","type","templateUrl","getTemplateUrl","when","httpOptions","cache","get","then","response","data","error","getFieldError","transcludeInWrapper","templateWrapper","getTemplateWrapperOption","doTransclusion","wrapper","wrapperEl","element","transcludeEl","find","replaceWith","checkWrapper","checkWrapperTemplate","url","JSON","stringify","templateOption","getTemplateWrapper","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","transclude","model","formId","index","fields","form","$interval","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","expression","prop","dataExpression","dataProp","newVal","key","setFormControl","cleanUp","stopWaitingForDestroy","cancel","interval","maxTime","intervalTime","iterations","formControl","$on","getFieldId","extend","value","modelOptions","getterSetter","allowInvalid","noFormControl","$watch","setElementTemplate","templateEl","html","contents","tests","$inject","_toArray","arr","Array","isArray","from","_slice","prototype","slice","currentFormId","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","isFunction","originalExpression","args","modifyArgs","apply","undefined","concat","arguments","displayName","originalListener","_len","length","originalArgs","_key","newResult","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","formlyUsabilityProvider","setTemplateUrl","templateUrlMap","setTemplate","templateMap","setTemplateWrapper","optionsNameOrTemplate","templateOrUrl","isUrl","disableWarnings","console","warn","defaultTemplateWrapperName","templateWrappersMap","_this","$get","provider","constant","errorInfoSlug","message","Error","getErrorMessage","toJson","getFormlyError","errorsAndWarningsUrlPrefix","additionalInfo","indexOf","$viewValue","join","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug","shift","push"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(11)(ngModule);\n\t__webpack_require__(14)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(16);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t\n\t        // setup watchers and parsers\n\t        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          if (hasValidators) {\n\t            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            };\n\t          } else {\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              ctrl.$setValidity(name, isValid);\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n\t    return {\n\t      restrict: \"A\",\n\t      priority: 599, // one after ngIf\n\t      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n\t        $element.removeAttr(\"formly-dynamic-name\");\n\t        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n\t        delete $attrs.formlyDynamicName;\n\t      }]\n\t    };\n\t  });\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\t\n\t        angular.extend($scope.options, {\n\t          // attach the key in case the formly-field directive is used directly\n\t          key: $scope.options.key || $scope.index || 0,\n\t          value: valueGetterSetter,\n\t          runExpressions: runExpressions,\n\t          modelOptions: {\n\t            getterSetter: true,\n\t            allowInvalid: true\n\t          }\n\t        });\n\t\n\t        // initalization\n\t        runExpressions();\n\t        if (!$scope.options.noFormControl) {\n\t          setFormControl();\n\t        }\n\t        if ($scope.options.model) {\n\t          $scope.$watch(\"options.model\", runExpressions, true);\n\t        }\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t            if (prop !== \"data\") {\n\t              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n\t            } else {\n\t              field.data = field.data || {};\n\t              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n\t                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n\t              });\n\t            }\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function setFormControl() {\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = $interval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined($scope.options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = $scope.form && $scope.form[$scope.id];\n\t            if (formControl) {\n\t              $scope.options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            $interval.cancel(interval);\n\t          }\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        apiCheck(scope.options);\n\t        getTemplate(scope.options).then(transcludeInWrapper(scope.options)).then(setElementTemplate);\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(templateEl.html());\n\t          $compile(el.contents())(scope);\n\t        }\n\t      }\n\t    };\n\t\n\t\n\t    function getTemplate(options) {\n\t      var template = options.template || formlyConfig.getTemplate(options.type);\n\t      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n\t      if (template) {\n\t        return $q.when(template);\n\t      } else if (templateUrl) {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(templateUrl, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n\t        });\n\t      } else {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t    }\n\t\n\t    function transcludeInWrapper(options) {\n\t      var templateWrapper = getTemplateWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!templateWrapper) {\n\t          return $q.when(angular.element(template));\n\t        }\n\t        formlyUsability.checkWrapper(templateWrapper);\n\t        if (templateWrapper.template) {\n\t          formlyUsability.checkWrapperTemplate(templateWrapper.template, templateWrapper);\n\t          return $q.when(doTransclusion(templateWrapper.template));\n\t        } else {\n\t          var httpOptions = { cache: $templateCache };\n\t          return $http.get(templateWrapper.url, httpOptions).then(function (response) {\n\t            var wrapper = response.data;\n\t            formlyUsability.checkWrapperTemplate(wrapper, templateWrapper);\n\t            return doTransclusion(wrapper);\n\t          })[\"catch\"](function (error) {\n\t            formlyWarn(\"proplem-loading-template-for-wrapper\", \"Problem loading template for wrapper\" + JSON.stringify(templateWrapper), error);\n\t          });\n\t        }\n\t\n\t        function doTransclusion(wrapper) {\n\t          var wrapperEl = angular.element(wrapper);\n\t          var transcludeEl = wrapperEl.find(\"formly-transclude\");\n\t          transcludeEl.replaceWith(template);\n\t          return wrapperEl;\n\t        }\n\t      };\n\t    }\n\t\n\t    function getTemplateWrapperOption(options) {\n\t      /* jshint maxcomplexity:6 */\n\t      var templateOption = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (templateOption === null) {\n\t        return \"\";\n\t      }\n\t      var templateWrapper = templateOption;\n\t      // nothing specified means use the default wrapper\n\t      if (!templateOption) {\n\t        templateWrapper = formlyConfig.getTemplateWrapper();\n\t      } else if (typeof templateOption === \"string\") {\n\t        // string means it's a type\n\t        templateWrapper = formlyConfig.getTemplateWrapper(templateOption);\n\t      }\n\t      return templateWrapper;\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", function formlyForm() {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: __webpack_require__(15),\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"formlyUsability\", function ($scope, formlyUsability) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }]\n\t    };\n\t  });\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this = this;\n\t\n\t\n\t    var templateUrlMap = {};\n\t    var templateMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultTemplateWrapperName = \"default\";\n\t\n\t    angular.extend(this, {\n\t      getTemplateUrl: getTemplateUrl,\n\t      setTemplateUrl: setTemplateUrl,\n\t      getTemplate: getTemplate,\n\t      setTemplate: setTemplate,\n\t      setTemplateWrapper: setTemplateWrapper,\n\t      getTemplateWrapper: getTemplateWrapper,\n\t      disableWarnings: false,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function setTemplateUrl(name, templateUrl) {\n\t      if (typeof name === \"string\") {\n\t        templateUrlMap[name] = templateUrl;\n\t      } else {\n\t        angular.forEach(name, function (templateUrl, name) {\n\t          setTemplateUrl(name, templateUrl);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getTemplateUrl(type) {\n\t      return templateUrlMap[type];\n\t    }\n\t\n\t    function setTemplate(name, template) {\n\t      if (typeof name === \"string\") {\n\t        templateMap[name] = template;\n\t      } else {\n\t        angular.forEach(name, function (template, name) {\n\t          setTemplate(name, template);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getTemplate(type) {\n\t      return templateMap[type];\n\t    }\n\t\n\t    function setTemplateWrapper(optionsNameOrTemplate, templateOrUrl, isUrl) {\n\t      if (!this.disableWarnings) {\n\t        console.warn(\"setTemplateWrapper is still experimental. The api may change. Use at your own risk\");\n\t      }\n\t      if (typeof optionsNameOrTemplate === \"string\") {\n\t        if (!templateOrUrl) {\n\t          isUrl = templateOrUrl;\n\t          templateOrUrl = optionsNameOrTemplate;\n\t          optionsNameOrTemplate = defaultTemplateWrapperName;\n\t        }\n\t        templateWrappersMap[optionsNameOrTemplate] = _defineProperty({}, isUrl ? \"url\" : \"template\", templateOrUrl);\n\t      } else {\n\t        angular.forEach(optionsNameOrTemplate, function (options, name) {\n\t          formlyUsabilityProvider.checkWrapper(options);\n\t          if (options.template) {\n\t            formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t          }\n\t          setTemplateWrapper(name, options.template || options.url, !!options.url);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getTemplateWrapper(name) {\n\t      return templateWrappersMap[name || defaultTemplateWrapperName];\n\t    }\n\t\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", function () {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.url) {\n\t        throw getFormlyError(null, \"Template wrappers can only have a url or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.url) {\n\t        throw getFormlyError(null, \"Template wrappers must have one of a url or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      if (template.indexOf(\"<formly-transclude></formly-transclude>\") === -1) {\n\t        throw getFormlyError(null, \"Template wrapper templates must use \\\"<formly-transclude></formly-transclude>\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"2.0.1\"));\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", function () {\n\t    return {\n\t      formlyEval: formlyEval,\n\t      getFieldId: getFieldId\n\t    };\n\t\n\t    function formlyEval(scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    }\n\t\n\t    function getFieldId(formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d6738c0e5af25044d754\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\n\nvar angular = require(\"angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n\n        // setup watchers and parsers\n        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n        angular.forEach(validators, function (validator, name) {\n          if (hasValidators) {\n            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            };\n          } else {\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              ctrl.$setValidity(name, isValid);\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n    return {\n      restrict: \"A\",\n      priority: 599, // one after ngIf\n      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n        $element.removeAttr(\"formly-dynamic-name\");\n        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n        delete $attrs.formlyDynamicName;\n      }]\n    };\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-dynamic-name.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\n        angular.extend($scope.options, {\n          // attach the key in case the formly-field directive is used directly\n          key: $scope.options.key || $scope.index || 0,\n          value: valueGetterSetter,\n          runExpressions: runExpressions,\n          modelOptions: {\n            getterSetter: true,\n            allowInvalid: true\n          }\n        });\n\n        // initalization\n        runExpressions();\n        if (!$scope.options.noFormControl) {\n          setFormControl();\n        }\n        if ($scope.options.model) {\n          $scope.$watch(\"options.model\", runExpressions, true);\n        }\n\n        // function definitions\n        function runExpressions() {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n            if (prop !== \"data\") {\n              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n            } else {\n              field.data = field.data || {};\n              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n              });\n            }\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function setFormControl() {\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = $interval(function () {\n            iterations++;\n            if (!angular.isDefined($scope.options.key)) {\n              return cleanUp();\n            }\n            var formControl = $scope.form && $scope.form[$scope.id];\n            if (formControl) {\n              $scope.options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            $interval.cancel(interval);\n          }\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        apiCheck(scope.options);\n        getTemplate(scope.options).then(transcludeInWrapper(scope.options)).then(setElementTemplate);\n\n        function setElementTemplate(templateEl) {\n          el.html(templateEl.html());\n          $compile(el.contents())(scope);\n        }\n      }\n    };\n\n\n    function getTemplate(options) {\n      var template = options.template || formlyConfig.getTemplate(options.type);\n      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n      if (template) {\n        return $q.when(template);\n      } else if (templateUrl) {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(templateUrl, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n        });\n      } else {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n    }\n\n    function transcludeInWrapper(options) {\n      var templateWrapper = getTemplateWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!templateWrapper) {\n          return $q.when(angular.element(template));\n        }\n        formlyUsability.checkWrapper(templateWrapper);\n        if (templateWrapper.template) {\n          formlyUsability.checkWrapperTemplate(templateWrapper.template, templateWrapper);\n          return $q.when(doTransclusion(templateWrapper.template));\n        } else {\n          var httpOptions = { cache: $templateCache };\n          return $http.get(templateWrapper.url, httpOptions).then(function (response) {\n            var wrapper = response.data;\n            formlyUsability.checkWrapperTemplate(wrapper, templateWrapper);\n            return doTransclusion(wrapper);\n          })[\"catch\"](function (error) {\n            formlyWarn(\"proplem-loading-template-for-wrapper\", \"Problem loading template for wrapper\" + JSON.stringify(templateWrapper), error);\n          });\n        }\n\n        function doTransclusion(wrapper) {\n          var wrapperEl = angular.element(wrapper);\n          var transcludeEl = wrapperEl.find(\"formly-transclude\");\n          transcludeEl.replaceWith(template);\n          return wrapperEl;\n        }\n      };\n    }\n\n    function getTemplateWrapperOption(options) {\n      /* jshint maxcomplexity:6 */\n      var templateOption = options.wrapper;\n      // explicit null means no wrapper\n      if (templateOption === null) {\n        return \"\";\n      }\n      var templateWrapper = templateOption;\n      // nothing specified means use the default wrapper\n      if (!templateOption) {\n        templateWrapper = formlyConfig.getTemplateWrapper();\n      } else if (typeof templateOption === \"string\") {\n        // string means it's a type\n        templateWrapper = formlyConfig.getTemplateWrapper(templateOption);\n      }\n      return templateWrapper;\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", function formlyForm() {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: require(\"./formly-form.html\"),\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"formlyUsability\", function ($scope, formlyUsability) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }]\n    };\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-dynamic-name\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this = this;\n\n\n    var templateUrlMap = {};\n    var templateMap = {};\n    var templateWrappersMap = {};\n    var defaultTemplateWrapperName = \"default\";\n\n    angular.extend(this, {\n      getTemplateUrl: getTemplateUrl,\n      setTemplateUrl: setTemplateUrl,\n      getTemplate: getTemplate,\n      setTemplate: setTemplate,\n      setTemplateWrapper: setTemplateWrapper,\n      getTemplateWrapper: getTemplateWrapper,\n      disableWarnings: false,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function setTemplateUrl(name, templateUrl) {\n      if (typeof name === \"string\") {\n        templateUrlMap[name] = templateUrl;\n      } else {\n        angular.forEach(name, function (templateUrl, name) {\n          setTemplateUrl(name, templateUrl);\n        });\n      }\n    }\n\n    function getTemplateUrl(type) {\n      return templateUrlMap[type];\n    }\n\n    function setTemplate(name, template) {\n      if (typeof name === \"string\") {\n        templateMap[name] = template;\n      } else {\n        angular.forEach(name, function (template, name) {\n          setTemplate(name, template);\n        });\n      }\n    }\n\n    function getTemplate(type) {\n      return templateMap[type];\n    }\n\n    function setTemplateWrapper(optionsNameOrTemplate, templateOrUrl, isUrl) {\n      if (!this.disableWarnings) {\n        console.warn(\"setTemplateWrapper is still experimental. The api may change. Use at your own risk\");\n      }\n      if (typeof optionsNameOrTemplate === \"string\") {\n        if (!templateOrUrl) {\n          isUrl = templateOrUrl;\n          templateOrUrl = optionsNameOrTemplate;\n          optionsNameOrTemplate = defaultTemplateWrapperName;\n        }\n        templateWrappersMap[optionsNameOrTemplate] = _defineProperty({}, isUrl ? \"url\" : \"template\", templateOrUrl);\n      } else {\n        angular.forEach(optionsNameOrTemplate, function (options, name) {\n          formlyUsabilityProvider.checkWrapper(options);\n          if (options.template) {\n            formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n          }\n          setTemplateWrapper(name, options.template || options.url, !!options.url);\n        });\n      }\n    }\n\n    function getTemplateWrapper(name) {\n      return templateWrappersMap[name || defaultTemplateWrapperName];\n    }\n\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", function () {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.url) {\n        throw getFormlyError(null, \"Template wrappers can only have a url or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.url) {\n        throw getFormlyError(null, \"Template wrappers must have one of a url or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      if (template.indexOf(\"<formly-transclude></formly-transclude>\") === -1) {\n        throw getFormlyError(null, \"Template wrapper templates must use \\\"<formly-transclude></formly-transclude>\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", function () {\n    return {\n      formlyEval: formlyEval,\n      getFieldId: getFieldId\n    };\n\n    function formlyEval(scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue,\n          $modelValue: modelValue\n        });\n      }\n    }\n\n    function getFieldId(formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.html\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}