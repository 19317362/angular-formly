{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 7308a7c199a444f76c0d","webpack:///./src/index.js","webpack:///./src/angular-fix/index.js","webpack:///./src/directives/formly-custom-validation.js","webpack:///./src/directives/formly-dynamic-name.js","webpack:///./src/directives/formly-field.js","webpack:///./src/directives/formly-form.js","webpack:///./src/directives/index.js","webpack:///./src/other/formlyUtils.js","webpack:///./src/providers/formlyConfig.js","webpack:///./src/providers/formlyVersion.js","webpack:///./src/providers/index.js","webpack:///./src/services/formlyUtil.js","webpack:///./src/services/index.js","webpack:///./src/directives/formly-form.html","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_14__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ngModuleName","angular","ngModule","formlyUtils","version","window","directive","formlyUtil","link","scope","el","attrs","ctrl","validators","$eval","formlyCustomValidation","hasValidators","hasOwnProperty","forEach","validator","name","validatorCollection","isAsync","modelValue","viewValue","formlyEval","$parsers","unshift","isValid","$modelValue","$setValidity","restrict","priority","controller","$scope","$element","$attrs","removeAttr","$set","formlyDynamicName","formlyField","$http","$q","$compile","$templateCache","formlyConfig","getTemplate","options","template","type","templateUrl","getTemplateUrl","when","httpOptions","cache","get","then","response","data","error","warn","getFieldError","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","transclude","model","formId","index","fields","form","$interval","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","expression","prop","dataExpression","dataProp","newVal","key","setFormControl","stopWaitingForDestroy","cleanUp","cancel","interval","maxTime","intervalTime","iterations","formControl","$on","getFieldId","extend","value","modelOptions","getterSetter","allowInvalid","noFormControl","$watch","setElementTemplate","html","contents","$inject","test","_toArray","arr","Array","isArray","from","_slice","prototype","slice","currentFormId","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","isFunction","originalExpression","args","modifyArgs","apply","undefined","concat","arguments","displayName","originalListener","_len","length","originalArgs","_key","newResult","setTemplates","templates","console","log","provider","setTemplateUrl","templateUrlMap","setTemplate","templateMap","setTemplateWrapper","_ref","isUrl","templateWrapperName","templateWrappersMap","getTemplateWrapper","disableWarnings","$get","constant","errorInfoSlug","message","url","errorsAndWarningsUrlPrefix","Error","toJson","$viewValue","warnInfoSlug","shift","push","join"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_14__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_14__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\tvar formlyUtils = __webpack_require__(7);\n\t\n\t__webpack_require__(10)(ngModule);\n\t__webpack_require__(12)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t\n\tmodule.exports = { ngModuleName: ngModuleName, formlyUtils: formlyUtils };\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(14);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t\n\t        // setup watchers and parsers\n\t        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          if (hasValidators) {\n\t            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            };\n\t          } else {\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              ctrl.$setValidity(name, isValid);\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n\t    return {\n\t      restrict: \"A\",\n\t      priority: 599, // one after ngIf\n\t      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n\t        $element.removeAttr(\"formly-dynamic-name\");\n\t        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n\t        delete $attrs.formlyDynamicName;\n\t      }]\n\t    };\n\t  });\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  var formlyField = function ($http, $q, $compile, $templateCache, formlyConfig, formlyUtil) {\n\t    var getTemplate = function (options) {\n\t      var template = options.template || formlyConfig.getTemplate(options.type);\n\t      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n\t      if (template) {\n\t        return $q.when(template);\n\t      } else if (templateUrl) {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(templateUrl, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyUtil.warn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n\t        });\n\t      } else {\n\t        throw formlyUtil.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t    };\n\t\n\t    var apiCheck = function (options) {\n\t      var getTemplateOptionsCount = function (options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      };\n\t\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUtil.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUtil.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t    };\n\t\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n\t        // function definitions\n\t        var runExpressions = function () {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t            if (prop !== \"data\") {\n\t              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n\t            } else {\n\t              field.data = field.data || {};\n\t              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n\t                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n\t              });\n\t            }\n\t          });\n\t        };\n\t\n\t        var valueGetterSetter = function (newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        };\n\t\n\t        var setFormControl = function () {\n\t          var cleanUp = function () {\n\t            stopWaitingForDestroy();\n\t            $interval.cancel(interval);\n\t          };\n\t\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = $interval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined($scope.options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = $scope.form && $scope.form[$scope.id];\n\t            if (formControl) {\n\t              $scope.options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyUtil.warn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\t        };\n\t\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\t\n\t        angular.extend($scope.options, {\n\t          // attach the key in case the formly-field directive is used directly\n\t          key: $scope.options.key || $scope.index || 0,\n\t          value: valueGetterSetter,\n\t          runExpressions: runExpressions,\n\t          modelOptions: {\n\t            getterSetter: true,\n\t            allowInvalid: true\n\t          }\n\t        });\n\t\n\t        // initalization\n\t        runExpressions();\n\t        if (!$scope.options.noFormControl) {\n\t          setFormControl();\n\t        }\n\t        if ($scope.options.model) {\n\t          $scope.$watch(\"options.model\", runExpressions, true);\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var setElementTemplate = function (template) {\n\t          el.html(template);\n\t          $compile(el.contents())(scope);\n\t        };\n\t\n\t        apiCheck(scope.options);\n\t        getTemplate(scope.options).then(setElementTemplate);\n\t      }\n\t    };\n\t\n\t  };\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\"];\n\t\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.test = false ? require(\"./formlyField.test\")(ngModule) : null;\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) {\n\t  return Array.isArray(arr) ? arr : Array.from(arr);\n\t};\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", function formlyForm() {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: __webpack_require__(13),\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"formlyUtil\", function ($scope, formlyUtil) {\n\t        var attachKey = function (field, index) {\n\t          field.key = field.key || index || 0;\n\t        };\n\t\n\t        var setupWatchers = function (field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUtil.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        };\n\t\n\t        var getWatchExpression = function (watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        };\n\t\n\t        var getWatchListener = function (watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        };\n\t\n\t        var modifyArgs = function (watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        };\n\t\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t      }]\n\t    };\n\t  });\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = {\n\t  setTemplates: setTemplates\n\t};\n\t\n\tfunction setTemplates(templates) {\n\t  console.log(templates);\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", function () {\n\t    var setTemplateUrl = function (name, templateUrl) {\n\t      if (typeof name === \"string\") {\n\t        templateUrlMap[name] = templateUrl;\n\t      } else {\n\t        angular.forEach(name, function (templateUrl, name) {\n\t          setTemplateUrl(name, templateUrl);\n\t        });\n\t      }\n\t    };\n\t\n\t    var getTemplateUrl = function (type) {\n\t      return templateUrlMap[type];\n\t    };\n\t\n\t    var setTemplate = function (name, template) {\n\t      if (typeof name === \"string\") {\n\t        templateMap[name] = template;\n\t      } else {\n\t        angular.forEach(name, function (template, name) {\n\t          setTemplate(name, template);\n\t        });\n\t      }\n\t    };\n\t\n\t    var getTemplate = function (type) {\n\t      return templateMap[type];\n\t    };\n\t\n\t    var setTemplateWrapper = function (_ref) {\n\t      var name = _ref.name;\n\t      var template = _ref.template;\n\t      var isUrl = _ref.isUrl;\n\t      if (!template) {\n\t        template = name;\n\t        name = templateWrapperName;\n\t      }\n\t      templateWrappersMap[name] = { template: template, isUrl: isUrl };\n\t    };\n\t\n\t    var getTemplateWrapper = function (name) {\n\t      return templateWrappersMap[name || templateWrapperName];\n\t    };\n\t\n\t    var templateUrlMap = {};\n\t    var templateMap = {};\n\t    var templateWrappersMap = {};\n\t    var templateWrapperName = \"default\";\n\t\n\t    angular.extend(this, {\n\t      getTemplateUrl: getTemplateUrl,\n\t      setTemplateUrl: setTemplateUrl,\n\t      getTemplate: getTemplate,\n\t      setTemplate: setTemplate,\n\t      setTemplateWrapper: setTemplateWrapper,\n\t      getTemplateWrapper: getTemplateWrapper,\n\t      disableWarnings: false,\n\t      $get: function formlyConfig() {\n\t        return this;\n\t      }\n\t    });\n\t  });\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"2.0.1\"));\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(8)(ngModule);\n\t  __webpack_require__(9)(ngModule);\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", [\"formlyConfig\", function (formlyConfig) {\n\t    var getFieldError = function (errorInfoSlug, message, field) {\n\t      var url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      return new Error(\"Formly Error: \" + message + \". \" + url + \" Field definition: \" + angular.toJson(field));\n\t    };\n\t\n\t    var formlyEval = function (scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    };\n\t\n\t    var warn = function () {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + errorsAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        console.warn.apply(console, args);\n\t      }\n\t    };\n\t\n\t    var getFieldId = function (formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    };\n\t\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    return {\n\t      getFieldError: getFieldError,\n\t      formlyEval: formlyEval,\n\t      warn: warn,\n\t      getFieldId: getFieldId\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(11)(ngModule);\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7308a7c199a444f76c0d\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\n\nvar angular = require(\"angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nvar formlyUtils = require(\"./other/formlyUtils\");\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\n\nmodule.exports = { ngModuleName: ngModuleName, formlyUtils: formlyUtils };\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n\n        // setup watchers and parsers\n        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n        angular.forEach(validators, function (validator, name) {\n          if (hasValidators) {\n            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            };\n          } else {\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              ctrl.$setValidity(name, isValid);\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n    return {\n      restrict: \"A\",\n      priority: 599, // one after ngIf\n      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n        $element.removeAttr(\"formly-dynamic-name\");\n        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n        delete $attrs.formlyDynamicName;\n      }]\n    };\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/formly-dynamic-name.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  var formlyField = function ($http, $q, $compile, $templateCache, formlyConfig, formlyUtil) {\n    var getTemplate = function (options) {\n      var template = options.template || formlyConfig.getTemplate(options.type);\n      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n      if (template) {\n        return $q.when(template);\n      } else if (templateUrl) {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(templateUrl, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyUtil.warn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n        });\n      } else {\n        throw formlyUtil.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n    };\n\n    var apiCheck = function (options) {\n      var getTemplateOptionsCount = function (options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      };\n\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUtil.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUtil.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n    };\n\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n        // function definitions\n        var runExpressions = function () {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n            if (prop !== \"data\") {\n              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n            } else {\n              field.data = field.data || {};\n              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n              });\n            }\n          });\n        };\n\n        var valueGetterSetter = function (newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        };\n\n        var setFormControl = function () {\n          var cleanUp = function () {\n            stopWaitingForDestroy();\n            $interval.cancel(interval);\n          };\n\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = $interval(function () {\n            iterations++;\n            if (!angular.isDefined($scope.options.key)) {\n              return cleanUp();\n            }\n            var formControl = $scope.form && $scope.form[$scope.id];\n            if (formControl) {\n              $scope.options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyUtil.warn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n        };\n\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\n        angular.extend($scope.options, {\n          // attach the key in case the formly-field directive is used directly\n          key: $scope.options.key || $scope.index || 0,\n          value: valueGetterSetter,\n          runExpressions: runExpressions,\n          modelOptions: {\n            getterSetter: true,\n            allowInvalid: true\n          }\n        });\n\n        // initalization\n        runExpressions();\n        if (!$scope.options.noFormControl) {\n          setFormControl();\n        }\n        if ($scope.options.model) {\n          $scope.$watch(\"options.model\", runExpressions, true);\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        var setElementTemplate = function (template) {\n          el.html(template);\n          $compile(el.contents())(scope);\n        };\n\n        apiCheck(scope.options);\n        getTemplate(scope.options).then(setElementTemplate);\n      }\n    };\n\n  };\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\"];\n\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.test = ON_TEST ? require(\"./formlyField.test\")(ngModule) : null;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/formly-field.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", function formlyForm() {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: require(\"./formly-form.html\"),\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"formlyUtil\", function ($scope, formlyUtil) {\n        var attachKey = function (field, index) {\n          field.key = field.key || index || 0;\n        };\n\n        var setupWatchers = function (field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUtil.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        };\n\n        var getWatchExpression = function (watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        };\n\n        var getWatchListener = function (watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        };\n\n        var modifyArgs = function (watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        };\n\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n      }]\n    };\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-dynamic-name\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = {\n  setTemplates: setTemplates\n};\n\nfunction setTemplates(templates) {\n  console.log(templates);\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/other/formlyUtils.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", function () {\n    var setTemplateUrl = function (name, templateUrl) {\n      if (typeof name === \"string\") {\n        templateUrlMap[name] = templateUrl;\n      } else {\n        angular.forEach(name, function (templateUrl, name) {\n          setTemplateUrl(name, templateUrl);\n        });\n      }\n    };\n\n    var getTemplateUrl = function (type) {\n      return templateUrlMap[type];\n    };\n\n    var setTemplate = function (name, template) {\n      if (typeof name === \"string\") {\n        templateMap[name] = template;\n      } else {\n        angular.forEach(name, function (template, name) {\n          setTemplate(name, template);\n        });\n      }\n    };\n\n    var getTemplate = function (type) {\n      return templateMap[type];\n    };\n\n    var setTemplateWrapper = function (_ref) {\n      var name = _ref.name;\n      var template = _ref.template;\n      var isUrl = _ref.isUrl;\n      if (!template) {\n        template = name;\n        name = templateWrapperName;\n      }\n      templateWrappersMap[name] = { template: template, isUrl: isUrl };\n    };\n\n    var getTemplateWrapper = function (name) {\n      return templateWrappersMap[name || templateWrapperName];\n    };\n\n    var templateUrlMap = {};\n    var templateMap = {};\n    var templateWrappersMap = {};\n    var templateWrapperName = \"default\";\n\n    angular.extend(this, {\n      getTemplateUrl: getTemplateUrl,\n      setTemplateUrl: setTemplateUrl,\n      getTemplate: getTemplate,\n      setTemplate: setTemplate,\n      setTemplateWrapper: setTemplateWrapper,\n      getTemplateWrapper: getTemplateWrapper,\n      disableWarnings: false,\n      $get: function formlyConfig() {\n        return this;\n      }\n    });\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/providers/formlyConfig.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/providers/formlyVersion.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/providers/index.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", [\"formlyConfig\", function (formlyConfig) {\n    var getFieldError = function (errorInfoSlug, message, field) {\n      var url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      return new Error(\"Formly Error: \" + message + \". \" + url + \" Field definition: \" + angular.toJson(field));\n    };\n\n    var formlyEval = function (scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue,\n          $modelValue: modelValue\n        });\n      }\n    };\n\n    var warn = function () {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + errorsAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        console.warn.apply(console, args);\n      }\n    };\n\n    var getFieldId = function (formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    };\n\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    return {\n      getFieldError: getFieldError,\n      formlyEval: formlyEval,\n      warn: warn,\n      getFieldId: getFieldId\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/services/formlyUtil.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/services/index.js\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/formly-form.html\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 14\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}