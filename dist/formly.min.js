angular.module("formly.render",[]),angular.module("formly",["formly.render"]),angular.module("formly.render").directive("formlyCustomValidation",["formlyUtil",function(a){"use strict";return{require:"ngModel",link:function(b,c,d,e){var f=b.$eval(d.formlyCustomValidation);if(f){var g=e.hasOwnProperty("$validators");angular.forEach(f,function(c,d){if(g){var f=c.isAsync?"$asyncValidators":"$validators";e[f][d]=function(d,e){return a.formlyEval(b,c,d,e)}}else e.$parsers.unshift(function(f){var g=a.formlyEval(b,c,e.$modelValue,f);return e.$setValidity(d,g),f})})}}}}]),angular.module("formly.render").directive("formlyDynamicName",function(){"use strict";return{restrict:"A",priority:599,controller:["$scope","$element","$attrs",function(a,b,c){b.removeAttr("formly-dynamic-name"),c.$set("name",a.$eval(c.formlyDynamicName)),delete c.formlyDynamicName}]}}),angular.module("formly.render").directive("formlyField",["$http","$compile","$templateCache","formlyConfig","formlyUtil",function(a,b,c,d,e){"use strict";return{restrict:"AE",transclude:!0,scope:{options:"=",result:"=",formId:"=?",index:"=?",fields:"=?",form:"=?"},controller:["$scope","$interval",function(a,b){function c(){var b=a.options,c=d();angular.forEach(b.expressionProperties,function(d,f){"data"!==f?b[f]=e.formlyEval(a,d,c):(b.data=b.data||{},angular.forEach(b.expressionProperties.data,function(d,f){b.data[f]=e.formlyEval(a,d,c)}))})}function d(b){return a.result&&(a.options.key||a.index)?(angular.isDefined(b)&&(a.result[a.options.key||a.index]=b),a.result[a.options.key||a.index]):void 0}function f(){function c(){d(),b.cancel(i)}var d,f=2e3,g=5,h=0,i=b(function(){if(h++,!angular.isDefined(a.options.key)&&!angular.isDefined(a.index))return c();var b=a.form&&a.form[a.id];b?(a.options.formControl=b,c()):g*h>f&&(e.warn("Couldn't set the formControl after "+f+"ms",a),c())},g);d=a.$on("$destroy",c)}a.id=e.getFieldId(a.formId,a.options,a.index),angular.extend(a.options,{runExpressions:c,modelOptions:{getterSetter:!0,allowInvalid:!0}}),a.options.runExpressions=c,a.value=d,c(a.result),a.options.noFormControl||f()}],link:function(f,g){function h(a){g.html(a),b(g.contents())(f)}var i=0;if(i+=f.options.template?1:0,i+=f.options.type?1:0,i+=f.options.templateUrl?1:0,0===i)return void e.warn("template type '"+f.options.type+"' not supported. On element:",g);i>1&&e.throwErrorWithField("You must only provide a type, template, or templateUrl for a field",f.options);var j=f.options.template||d.getTemplate(f.options.type);if(j)h(j);else{var k=f.options.templateUrl||d.getTemplateUrl(f.options.type);k&&a.get(k,{cache:c}).then(function(a){h(a.data)},function(a){e.warn("Problem loading template for "+k,a)})}}}}]),angular.module("formly.render").directive("formlyForm",function(){"use strict";var a=1;return{restrict:"E",templateUrl:"directives/formly-form.html",replace:!0,transclude:!0,scope:{fields:"=",result:"=",form:"=?"},controller:["$scope","formlyUtil",function(b,c){function d(a,d){if(angular.isDefined(a.watcher)){var e=a.watcher;angular.isArray(e)||(e=[e]),angular.forEach(e,function(e){var f;angular.isDefined(e.listener)||c.throwErrorWithField("All field watchers must have a listener",a);var g=e.expression||'result["'+a.key+'" || '+d+"]";if(angular.isFunction(g)){var h=g;g=function(){var a=Array.prototype.slice.call(arguments,0);return a.unshift(b.fields[d]),a.push(f),h.apply(this,a)},g.displayName="Formly Watch Expression for field for "+a.key}var i=e.listener;if(angular.isFunction(i)){var j=i;i=function(){var a=Array.prototype.slice.call(arguments,0);return a.unshift(b.fields[d]),a.push(f),j.apply(this,a)},i.displayName="Formly Watch Listener for field for "+a.key}var k=e.type||"$watch";f=b[k](g,i,e.watchDeep)})}}b.formId="formly_"+a++,angular.forEach(b.fields,d),b.$watch("result",function(a){angular.forEach(b.fields,function(b){b.runExpressions&&b.runExpressions(a)})},!0)}]}}),angular.module("formly.render").provider("formlyConfig",function(){"use strict";function a(b,c){"string"==typeof b?e[b]=c:angular.forEach(b,function(b,c){a(c,b)})}function b(a){return e[a]}function c(a,b){"string"==typeof a?f[a]=b:angular.forEach(a,function(a,b){c(b,a)})}function d(a){return f[a]}var e={},f={};this.getTemplateUrl=b,this.setTemplateUrl=a,this.getTemplate=d,this.setTemplate=c,this.disableWarnings=!1,this.$get=function(){return this}}),angular.module("formly.render").factory("formlyUtil",["formlyConfig",function(a){"use strict";function b(a,b){throw new Error("Formly Error: "+a+". Field definition: "+angular.toJson(b))}function c(a,b,c,d){return angular.isFunction(b)?b(d,c,a):a.$eval(b,{$viewValue:d,$modelValue:c})}function d(){if(!a.disableWarnings){var b=Array.prototype.slice.call(arguments);b.unshift("Formly Warning:"),console.warn.apply(console,b)}}function e(a,b,c){var d=b.type;return!d&&b.template?d="template":!d&&b.templateUrl&&(d="templateUrl"),[a,d,b.key,c].join("_")}return{throwErrorWithField:b,formlyEval:c,warn:d,getFieldId:e}}]),angular.module("formly.render").run(["$templateCache",function(a){"use strict";a.put("directives/formly-form.html",'<ng-form class=formly name=form role=form><formly-field ng-repeat="field in fields" class=formly-field options=field result=result fields=fields form=form form-id=formId ng-if=!field.hide index=$index></formly-field><div ng-transclude></div></ng-form>')}]);
//# sourceMappingURL=formly.min.map