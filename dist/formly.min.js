angular.module("formly.render",[]),angular.module("formly",["formly.render"]),angular.module("formly.render").directive("formlyCustomValidation",["$parse",function(a){"use strict";return{require:"ngModel",link:function(b,c,d,e){function f(c,d,e){var f=!1;if(angular.isFunction(c))f=c(e,b);else{var g=angular.extend({value:e},b);f=a(c)(g)}return f}var g=b.$eval(d.formlyCustomValidation);if(g){if(angular.isArray(g)||g.name&&g.validate){angular.isArray(g)||(g=[g]);var h={};angular.forEach(g,function(a){h[a.name]=a.validate}),g=h}var i=e.hasOwnProperty("$validators");angular.forEach(g,function(a,b){if(i){var c=a.isAsync?"$asyncValidators":"$validators";e[c][b]=function(c,d){return f(a,b,c||d)}}else e.$parsers.unshift(function(c){var d=f(a,b,c);return e.$setValidity(b,d),c})})}}}}]),angular.module("formly.render").directive("formlyDynamicName",function(){"use strict";return{restrict:"A",priority:599,controller:["$scope","$element","$attrs",function(a,b,c){b.removeAttr("formly-dynamic-name"),c.$set("name",a.$eval(c.formlyDynamicName)),delete c.formlyDynamicName,a.$emit("formly-dynamic-name-update")}]}}),angular.module("formly.render").directive("formlyField",["$http","$compile","$templateCache","formlyConfig","formlyUtil",function(a,b,c,d,e){"use strict";function f(){d.disableWarnings||console.warn.apply(console,arguments)}return{restrict:"AE",transclude:!0,scope:{options:"=",formId:"=?",index:"=?",fields:"=?",result:"=formResult",form:"=?"},controller:["$scope","$parse",function(a,b){function c(){var b=a.options.type;return!b&&a.options.template?b="template":!b&&a.options.templateUrl&&(b="templateUrl"),a.formId+b+a.options.key+a.index}function d(){var c=a.options;angular.forEach(c.expressionProperties,function(d,f){if(angular.isFunction(d))c[f]=d(e(),a);else{var g=angular.extend({value:e()},a);c[f]=b(d)(g)}})}function e(b){return angular.isDefined(b)&&(a.result[a.options.key||a.index]=b),a.result[a.options.key||a.index]}a.id=c(),angular.extend(a.options,{runExpressions:d,modelOptions:{getterSetter:!0,allowInvalid:!0}}),a.options.runExpressions=d,a.value=e,d(a.result)}],link:function(g,h){function i(a){h.html(a),b(h.contents())(g)}var j=0;if(j+=g.options.template?1:0,j+=g.options.type?1:0,j+=g.options.templateUrl?1:0,0===j)return void f("Formly Warning: template type '"+g.options.type+"' not supported. On element:",h);j>1&&e.throwErrorWithField("You must only provide a type, template, or templateUrl for a field",g.options);var k=g.options.template||d.getTemplate(g.options.type);if(k)i(k);else{var l=g.options.templateUrl||d.getTemplateUrl(g.options.type);l&&a.get(l,{cache:c}).then(function(a){i(a.data)},function(a){f("Formly Warning: Problem loading template for "+l,a)})}}}}]),angular.module("formly.render").directive("formlyForm",function(){"use strict";return{restrict:"E",templateUrl:"directives/formly-form.html",replace:!0,transclude:!0,scope:{fields:"=",options:"=?",result:"=",formOnParentScope:"=name"},compile:function(){return{post:function(a,b,c){a.formOnParentScope=a[c.name]}}},controller:["$scope","$timeout","formlyUtil","$interval",function(a,b,c){function d(b,d){var e=b.watch;angular.isDefined(e)&&(angular.isArray(e)||(e=[e]),angular.forEach(e,function(e){var f;angular.isDefined(e.listener)||c.throwErrorWithField("All field watchers must have a listener",b);var g=e.expression||'result["'+b.key+'" || '+d+"]";angular.isFunction(g)&&(g=function(){var c=Array.prototype.slice.call(arguments,0);return c.unshift(a.fields[d]),c.push(f),b.watch.expression.apply(this,c)},g.displayName="Formly Watch Expression for field for "+b.key);var h=e.listener;angular.isFunction(h)&&(h=function(){var c=Array.prototype.slice.call(arguments,0);return c.unshift(a.fields[d]),c.push(f),b.watch.listener.apply(this,c)},h.displayName="Formly Watch Listener for field for "+b.key);var i=e.type||"$watch";f=a[i](g,h,e.watchDeep)}))}angular.forEach(a.fields,d),a.$watch("result",function(b){angular.forEach(a.fields,function(a){a.runExpressions&&a.runExpressions(b)})},!0),a.$on("formly-dynamic-name-update",function(c){c.stopPropagation(),a.formOnParentScope&&b(function(){angular.forEach(a.fields,function(b){var c=a.formOnParentScope[b.key];c&&(b.formField=c)})})})}]}}),angular.module("formly.render").provider("formlyConfig",function(){"use strict";function a(b,c){"string"==typeof b?e[b]=c:angular.forEach(b,function(b,c){a(c,b)})}function b(a){return e[a]}function c(a,b){"string"==typeof a?f[a]=b:angular.forEach(a,function(a,b){c(b,a)})}function d(a){return f[a]}var e={},f={};this.getTemplateUrl=b,this.setTemplateUrl=a,this.getTemplate=d,this.setTemplate=c,this.disableWarnings=!1,this.$get=function(){return this}}),angular.module("formly.render").factory("formlyUtil",function(){function a(a,b){throw new Error("Formly Error: "+a+". Field definition: "+angular.toJson(b))}return{throwErrorWithField:a}}),angular.module("formly.render").run(["$templateCache",function(a){"use strict";a.put("directives/formly-form.html",'<ng-form class=formly role=form><formly-field ng-repeat="field in fields" class=formly-field options=field form-result=result fields=fields form=formOnParentScope form-id=options.uniqueFormId ng-if=!field.hide index=$index></formly-field><div ng-transclude></div></ng-form>')}]);
//# sourceMappingURL=formly.min.map